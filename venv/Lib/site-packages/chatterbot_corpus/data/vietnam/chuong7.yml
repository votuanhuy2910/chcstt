categories:
    - chuong7
conversations:
    - - 'Nội dung của chương 7'
      - "Chương 7: Hàm - Lập trình hướng cấu trúc\n
        7.1. Định nghĩa hàm (hay còn gọi là đơn thể):\n
        a. Hàm không có giá trị trả về:\n
        i. Hàm không có truyền tham số\n
        Cú pháp:\n
          void tên_hàm() {\n
            //Khối lệnh;\n
          } \n
        Ví dụ:  void Hàm_Chào() {\n
                  cout<<”hello world”;\n
                  cout<<endl;\n
                }\n
        ii. Hàm có truyền tham số\n
        Cú pháp:\n
          void tên_hàm(kiểu thamsô1 , kiểu & thamsố2 ,..) {\n
            //Khối lệnh;\n
          }\n
        Ví dụ:  void Xuất_Tổng(int a, int b) {\n
                  int s = a + b;\n
                  cout<<”Tổng”<<a<<”và”<<b<<”là”;\n
                  cout<<s;\n
                }\n
        b. Hàm có giá trị trả về:\n
        i. Hàm không có truyền tham số\n
        Cú pháp:\n
          kiểu_trả_về tên_hàm() {\n
            //Khối lệnh;\n
            return giá_trị_trả_về;\n
          }\n
        Ví dụ:  int Tổng_1_đến_10() {\n
                  int s = 0;\n
                  for (int i = 1; i<=10 ; i++)\n
                    s + = i;\n
                  return s; // Giá trị trả về\n
                } \n
        ii. Hàm có truyền tham số\n
        Cú pháp:\n
          kiểu_trả_về tên_hàm(kiểu thamsô1, kiểu & thamsố2 ,..) {\n
            //Khối lệnh;\n
            return giá_trị_trả_về;\n
          }\n
        Ví dụ:  int Tính_Tổng(int a, int b) {\n
                  int s = a + b;\n
                  return s; // Giá trị trả về\n
                }\n
        7.2. Khai báo hàm – khai báo prototype:\n
        Cú pháp:\n
        - void Tên_Hàm(danh sách kiểu các tham số);\n
        - kiểu_trả_về Tên_Hàm(danh sách kiểu các tham số);\n
        7.3. Lời gọi hàm:\n
        7.4. Tham trị và tham chiếu (quan trọng): \n
        7.5. Giá trị mặc ñịnh của tham số:\n
        a. Ý nghĩa: Cho phép gọi hàm một cách linh hoạt:\n
        - Nếu có truyền tham số thì hàm sẽ lấy tham số được truyền\n
        - Nếu không có truyền tham số thì hàm sẽ lấy giá trị mặc định\n
        b. Các khai báo: Ta chỉ cần khai báo các giá trị mặc định của tham số lúc khai báo prototype (khai báo hàm)\n
        kiểu_trả_về tên_hàm(kiểu thamsố1 = giátrị1, kiểu thamsố2=giá_trị 2, ...);\n
        7.7. Quá tải hàm:\n
        a. Các thành phần của hàm: Hai hàm khác nhau khi chúng có ít nhất 1 trong 3 thành phần khác nhau, gồm:\n
          - Tên hàm.\n
          - Kiểu của tham số.\n
          - Số lượng tham số.\n
        b. Quá tải hàm: Quá tải hàm là những hàm có cùng tên hàm, nếu rơi vào 1 trong 2 trường hợp sau:\n
          - Số lượng tham số khác nhau.\n
          - Cùng số lượng tham số, khác nhau ở một kiểu dữ liệu nào ñó của tham số.\n
        7.8. Quá tải toán tử:\n
        a. Các toán tử trong C++:\n
        Các toán tử quen thuộc trong C++\n
          Toán tử (+) Ví dụ: a=b+c;\n
          Toán tử (-) Ví dụ: a=b-c;\n
          Toán tử (*) Ví dụ: a=b*c;\n
          Toán tử (/) Ví dụ: a=b/c;\n
          Toán tử (%) Ví dụ: a=b%c;\n
          Toán tử (=) Ví dụ: a=b;\n
          Toán tử (==) Ví dụ: if(a==b){};\n
          Toán tử ([]) Ví dụ: a[i]; // với a là mản\n
          Toán tử (<<) Ví dụ: cout<<i;\n
          Toán tử (>>) Ví dụ: cin>>i;\n
        Các toán trong C++ đều có chung một cách đặt tên hàm theo mô tả sau: operator\n
        b. Quá tải toán tử:\n
        Ứng dụng: ta có thể sử dụng các toán tử của C++ đối với các biến cấu trúc mà ta tự nghĩa như những kiểu bình thường trong C++\n

        "