categories:
    - chuong5
conversations:
    - - 'Nội dung của chương 5'
      - "Chương 5: Cấu trúc\n
        5.1. Nhắc lại cách khai báo một kiểu dữ liệu mới (typedef):\n
        a. Cú pháp: typedef Kiểu_dữ_liệu_cũ Kiểu_dữ_liệu_mới;\n
        b. Ý nghĩa:\n
          Khi khai báo một kiểu dữ liệu mới bằng typedef, tức là:\n
          -	Kiểu_dữ_liệu_mới là 1 kiểu dữ liệu như kiểu Kiểu_dữ_liệu_cũ.\n
          -	Ta có thể sử dụng kiểu dữ liệu mới như những kiểu dữ liệu bình thường khác (sử dụng giống như kiểu dữ liệu int, float, double, char, …)\n
        5.2. Cách khai báo một kiểu dữ liệu mới bằng cú trúc:\n
        a. Mục đích:\n
        Trên thực tế, nhiều đối tượng có chứa nhiều thành phần riêng lẽ. Ví dụ, PHÂN SỐ có 2 thành phần là TỬ và MẪU, hoặc ĐIỂM thì có HOÀNH ĐỘ X và TUNG ĐỘ Y. Xu hướng lập trình hiện nay là gộp các thành phần riêng lẽ thành một kiểu dữ liệu mới, mà kiểu dữ liệu này sẽ chứa thông tin của các thành phần ñó. Ví dụ, ta sẽ xây dựng kiểu dữ liệu PHÂNSỐ, với 2 trường (field) là TỬ và MẪU, trong đó TỬ và MẪU là 2 trường kiểu số nguyên.\n
        b. Cú pháp:\n
        Cách 1: dùng tyedef để định nghĩa kiểu mới\n
          typedef struct{\n
            kiểu_dữ_liệu trường_1;\n
            kiểu_dữ_liệu trường_2;\n
            ..... \n
          } tên_cấu_trúc;\n
        Cách 2: không dùng tyedef ñể ñịnh nghĩa kiểu mới\n
          struct tên_cấu_trúc{ \n
            kiểu_dữ_liệu trường_1;\n
            kiểu_dữ_liệu trường_2;\n
            .....\n
          };\n
        khai báo tên cấu trúc ñồng thời có thể khai báo cùng lúc các biến kiểu cấu trúc.\n
          struct tên_cấu_trúc{ \n
            kiểu_dữ_liệu trường_1;\n
            kiểu_dữ_liệu trường_2;\n
            .....\n
          }biến_1, biến_2,...; \n
        "